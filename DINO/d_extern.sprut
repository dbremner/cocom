/* This file contains execution (run-time) objects description which
   can be used for external functions.  Not all nodes fields are
   described here. */

/*
   Copyright (C) 1997-2013 Vladimir Makarov.

   Written by Vladimir Makarov <vmakarov@users.sourceforge.net>

   This file is part of interpreter of DINO.

   This is free software; you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This software is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GNU CC; see the file COPYING.  If not, write to the Free
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.

*/

/* Don't use -flat-structure for generation SPI from this description. */

%type bool_t size_t hide_t char_t int_t unsigned_int_t floating_t char_ptr_t
      instance_state_t IR_hidden_node_t ER_node_mode_t
      process_status_t stack_ptr_t

%import {

#include "d_types.h"

typedef void *hide_t;

typedef struct IR_node *IR_hidden_node_t;

typedef char *char_ptr_t;

/* This enumeration declares all possible states of of heap instance
   which contains function destroy.  Don't change it.  */
enum instance_state
{
  IS_initial = 0,
  IS_to_be_destroyed,
  IS_destroyed
};

typedef enum instance_state instance_state_t;

/* This enumeration declares all possible states of process. */
enum process_status
{
  /* Process is not blocked.  Created process has also this status.
     Remember that we automatically zero all free memory.  Maximum one
     process can have status PS_READY or PS_STARTED.  This state can
     come only from the 3 last states. */
  PS_READY = 1,
  /* It can come from only PS_READY after execution of a stmt. */
  PS_STARTED,
  /* Process is blocked because its quantum has been exhausted.  It can
     come from only PS_STARTED after execution of a stmt. */
  PS_BLOCKED_BY_QUANTUM_SWITCH,
  /* Process is blocked by wait-stmt. It can come from only
     PS_STARTED. */
  PS_BLOCKED_BY_WAIT,
  /* Process is blocked by wait-stmt.  It can come from only PS_READY. */
  PS_NOT_STARTED
};

typedef enum process_status process_status_t;

typedef struct ER_node **stack_ptr_t;

}

%export {

#include <string.h>
#include <assert.h>

#define d_assert assert

#ifdef __GNUC__
#define __always__ __attribute__ ((__always_inline__))
#else
#define __always__
#endif

#define do_always_inline inline __always__

/* Container for all kind of variables. */
typedef union
  {
    _ER_nil nil;
    _ER_hide hide;
    _ER_hideblock hideblock;
    _ER_char ch;
    _ER_int i;
    _ER_float f;
    _ER_type type;
    _ER_vect vect;
    _ER_tab tab;
    _ER_empty_entry ee;
    _ER_deleted_entry de;
    _ER_instance inst;
    _ER_func func;
    _ER_class cl;
    _ER_process process;
    _ER_external_var_ref external_var_ref;
  } val_t;

/* Type of all external functions. */
typedef val_t external_func_t (int, val_t *);

/* This function must be used only when dynamic libarary is not
   implemented.  In this case, provide get_library_search_function
   (and main) and link it with the dino library to make an extended
   dino interpriter. */

extern void *get_library_search_function (const char *name);

/* This is trick (usage that ER_NODE_MODE is macro)!!!  Therefore the
   following macro must apply to make new node or to make redirections
   or unpacked vector <-> unpacked vector. */
#define ER_SET_MODE(v, m) (ER_NODE_MODE (v) = (m))

/* Align of heap objects. */
#define MAX_ALIGNMENT sizeof (double)

#if defined(NDEBUG)
/* The macro call value is size of memory allocated for the heap
   object with size S accounting for aligning. */
#define ALLOC_SIZE(s) (((s)+MAX_ALIGNMENT-1)/MAX_ALIGNMENT*MAX_ALIGNMENT)
#else
#define ALLOC_SIZE(s) _alloc_size (s)
#endif

#if defined(NDEBUG)
#define ER_hideblock_start(hideblock)\
  ((char *) (hideblock) + ALLOC_SIZE (sizeof (_ER_heap_hideblock)))
#else
#define ER_hideblock_start(hideblock) _hideblock_start (hideblock)
#endif

#if defined(NDEBUG)
#define ER_pack_els(vect)\
  ((char *) (vect) + ALLOC_SIZE (sizeof (_ER_heap_pack_vect)) + ER_disp (vect))
#else
#define ER_pack_els(vect) _pack_els (vect)
#endif

#if defined(NDEBUG)
#define ER_unpack_els(vect)\
  ((ER_node_t) ((char *) (vect) + ALLOC_SIZE (sizeof (_ER_heap_unpack_vect))\
                + ER_disp (vect)))
#else
#define ER_unpack_els(vect) _unpack_els (vect)
#endif

#if defined(NDEBUG)
#define ER_tab_els(tab)\
  ((ER_node_t) ((char *) (tab) + ALLOC_SIZE (sizeof (_ER_heap_tab))))
#else
#define ER_tab_els(tab) _tab_els (tab)
#endif

#if defined(NDEBUG)
#define ER_instance_vars(instance)\
  ((ER_node_t) ((char *) (instance) + ALLOC_SIZE (sizeof (_ER_heap_instance))))
#else
#define ER_instance_vars(instance) _instance_vars (instance)
#endif

#if defined(NDEBUG)
#define ER_stack_vars(stack)\
  ((ER_node_t) ((char *) (stack) + ALLOC_SIZE (sizeof (_ER_heap_stack))))
#else
#define ER_stack_vars(stack) _stack_vars (stack)
#endif

#if defined(NDEBUG)
#define ER_stacks_table(process)\
  ((stack_ptr_t) ((char *) (process) + ALLOC_SIZE (sizeof (_ER_heap_process))))
#else
#define ER_stacks_table(process) _stacks_table (process)
#endif

#if defined(NDEBUG)
#define IVAL(first_var, index)\
   ((ER_node_t) ((char *) (first_var) + (index) * (int) sizeof (val_t)))
#else
#define IVAL(first_var, index)\
   _indexed_val ((ER_node_t) first_var, index)
#endif

#if defined(NDEBUG)
#define INDEXED_ENTRY_KEY(first_entry, index)\
   ((ER_node_t) ((char *) (first_entry) + 2 * (index) * (int) sizeof (val_t)))
#else
#define INDEXED_ENTRY_KEY(first_entry, index)\
   _indexed_entry_key (first_entry, index)
#endif

#if defined(NDEBUG)
#define INDEXED_ENTRY_VAL(first_entry, index)\
   ((ER_node_t) ((char *) (first_entry) + (2 * (index) + 1) * (int) sizeof (val_t)))
#else
#define INDEXED_ENTRY_VAL(first_entry, index)\
   _indexed_entry_val (first_entry, index)
#endif

#define DECR_TOP(stack, decr)\
   ER_set_ctop ((stack), ER_ctop (stack) - (decr) * (int) sizeof (val_t))

#define DECR_CTOP(decr) (ctop = IVAL (ctop, -(decr)))

#ifndef NDEBUG
size_t _alloc_size(size_t s);

char *_hideblock_start (ER_node_t hideblock);

char *_pack_els (ER_node_t vect);

ER_node_t _unpack_els (ER_node_t vect);

ER_node_t _tab_els (ER_node_t tab);

ER_node_t _instance_vars (ER_node_t instance);

ER_node_t _stack_vars (ER_node_t stack);

stack_ptr_t _stacks_table (ER_node_t process);

ER_node_t _indexed_val (ER_node_t first_var, int index);

ER_node_t _indexed_entry_key (ER_node_t first_entry, int index);

ER_node_t _indexed_entry_val (ER_node_t first_entry, int index);

#endif

int eq_val (val_t *val1_ptr, val_t *val2_ptr, size_t number);

size_t instance_size (IR_hidden_node_t class);

extern size_t type_size_table [];
extern size_t val_displ_table [];

ER_node_t create_hideblock (size_t length);

ER_node_t create_empty_vector (void);
ER_node_t create_unpack_vector (size_t els_number);
ER_node_t create_pack_vector (size_t els_number, ER_node_mode_t eltype);
ER_node_t expand_vector (ER_node_t vect, size_t el_number);
ER_node_t unpack_vector (ER_node_t vect);
void pack_vector_if_possible (ER_node_t unpack_vect);
int eq_vector (ER_node_t v1, ER_node_t v2);
ER_node_t copy_vector (ER_node_t vect);
extern ER_node_t create_empty_string (size_t min_length);
extern ER_node_t create_string (const char *string);

int eq_instance (ER_node_t i1, ER_node_t i2);

int eq_table (ER_node_t t1, ER_node_t t2);
ER_node_t create_tab (size_t size);
ER_node_t find_tab_entry (ER_node_t tab, ER_node_t key, int reserve);
int remove_tab_el (ER_node_t tab, ER_node_t key);
ER_node_t copy_tab (ER_node_t tab);
ER_node_t find_next_key (ER_node_t tab, ER_node_t key);
ER_node_t table_to_vector_conversion (ER_node_t tab);
ER_node_t vector_to_table_conversion (ER_node_t vect);

void make_immutable (ER_node_t obj);

static void do_always_inline
set_vect_dim (ER_node_t v, ER_node_t vect, int_t dim)
{
  ER_set_vect (v, vect);
  ER_set_dim (v, dim);
}

static void do_always_inline
set_packed_vect_el (ER_node_t vect, size_t i, ER_node_t vect_el)
{
#if 0
  val_t val;
  size_t el_size = type_size_table [ER_NM_vect];
  size_t displ = val_displ_table [ER_NM_vect];
#endif

  d_assert (ER_NODE_MODE (vect) == ER_NM_heap_pack_vect);
  d_assert (ER_NODE_MODE (vect_el) == ER_NM_heap_pack_vect
	    || ER_NODE_MODE (vect_el) == ER_NM_heap_unpack_vect);
#if 1
  ((ER_node_t *) ER_pack_els (vect)) [i] = vect_el;
#else
  ER_SET_MODE ((ER_node_t) &val, ER_NM_vect);
  set_vect_dim ((ER_node_t) &val, vect_el, 0);
  memcpy (ER_pack_els (vect) + i * el_size, (char *) &val + displ, el_size);
#endif
}

}

%%

/* This page contains definitions of heap objects. */

/* We could use multiple inheritance to simplify description but it
   hurts interpreter speed, so we use single inheritance here. */

%abstract
heap_obj :: %root
%other
  /* Is it immutable object (immutable object can not be changed).
     The filed is used fo vectors, tables, instances, and
     hideblocks. */
  immutable : bool_t
  /* These three members are used during garbage collection. */
  it_was_processed : bool_t
  state : instance_state_t
  new_place : char_ptr_t
  unique_number : size_t
;

%abstract
heap_vect_tab :: heap_obj
%other
  allocated_length : size_t  /* actual allocated length of the object. */
  /* Number of elements (vector or table).  It is not used in redirection. */
  els_number : size_t
;

/* The following node represent packed or unpacked representation of
   the vector. */
%abstract
heap_vect :: heap_vect_tab
%other
  /* Type of packed elements.  Used only for packed vector.  We need
     to have the same size of packed and unpacked vector header
     representation.  This is used during transformation unpacked
     vector into packed vector (see heap allocator and GC). */
  pack_vect_el_type : ER_node_mode_t
  /* ????? */
  disp : size_t
;

/* The vector can be stored in packed and unpacked state.  The packed
   storing is possible only when all element have the same type. */
heap_pack_vect :: heap_vect
;

/* Unpack representation of the vector. */
heap_unpack_vect :: heap_vect
;

/* Table. */
heap_tab :: heap_vect_tab
%other
  entries_number : size_t /* number of all entries in the table */
  /* Current number of deleted elements in the table */
  deleted_els_number : size_t
  /* Index of the last access key or -1 if undefined.  It is used to
     speed up the repeated access.  */
  last_key_index : int_t
  /* The first entry is placed immediately after this node in the
     heap. */
;

/* Code which may have the context (parent environment). */
%abstract
context_heap_obj :: heap_obj
%other
  /* Context in which the variables are searched for.  See also
     comment for heap_process. */
  context : context_heap_obj
  block_node : IR_hidden_node_t /* Pointer to corresponding block node. */
  context_number : int_t        /* Unique number */
;

/* Instance of a class. */
heap_instance :: context_heap_obj
%other
  instance_class : IR_hidden_node_t /* Pointer to corresponding class decl. */
  /* The first var is placed immediately after this node in the heap. */
;

/* Stack of a block. */
heap_stack :: context_heap_obj
%other
  /* The stack which will be after execution code in the stack.  Chain
     `context' contains the chain `prev_stack'.  But between
     prev_stack - cstack may be additional environments (stacks or
     instances. */
  prev_stack : heap_stack
  /* Pointer to the last temporary var of the block at the
     current time.  We use char_ptr_t to prevent the checking. */
  ctop : char_ptr_t
  /* The first var is placed immediately after this node in the heap.
     Temporary vars are placed after all permanent vars. */
;

heap_process :: context_heap_obj
%other
  /* Here context is context of the function (thread) which is called
     during process creation. */
  /* The following is NULL for the main process. */
  thread_func : IR_hidden_node_t
  process_status : process_status_t
  /* Pointer to the process which immediatelly started this process. */
  father : heap_process
  /* All processes form double linked loop list with these members. */
  prev, next : heap_process
  /* Value of cstack which will be after the resuming the process. */
  saved_cstack : heap_stack
  /* Unique process number. */
  process_number : int_t
;

heap_hideblock :: heap_obj
%other
  /* Length of the block without the header. */
  hideblock_length : int_t
  /* The data are placed immediately after this node in the heap. */
;



/* This page describes values.  All values are allocated as a
   part of heap objects. */
%abstract
val :: %root
;

/*%final*/
nil :: val
;

/*%final*/
hide :: val
%other
  hide : hide_t
;

/*%final*/
hideblock :: val
%other
  hideblock : heap_hideblock
;

/*%final*/
char :: val
%other
  ch : char_t
;

/*%final*/
int :: val
%other
  i : int_t
;

/*%final*/
float :: val
%other
  f : floating_t
;

/*%final*/
type :: val
%other
  type : ER_node_mode_t
;

/*%final*/
vect :: val
%other
  vect : heap_vect  /* This field should be placed first.  */
  dim : int_t
;

/*%final*/
tab :: val
%other
  tab : heap_tab
;

/* The following nodes can used only as key in table. */
/*%final*/
empty_entry, deleted_entry :: val
;

/*%final*/
instance :: val
%other
  instance : heap_instance
;

/*%final*/
func :: val
%other
  func_no : int_t
  func_context : context_heap_obj
;

/*%final*/
thread :: val
%other
  thread_no : int_t
  thread_context : context_heap_obj
;

/*%final*/
class :: val
%other
  class_no : int_t
  class_context : context_heap_obj
;

/*%final*/
stack :: val
%other
  stack : heap_stack
;

/*%final*/
process :: val
%other
  process : heap_process
;

/* The following may be stored only in temporary vars (in left side of
   assignment): */

/* It is a reference for external var.  It is used only in left side
   of assignment stmt. */
/*%final*/
external_var_ref :: val
%other
  external_var_ref : char_ptr_t /* Address of external variable. */
;

%%

/*
Local Variables:
mode:c
End:
*/
