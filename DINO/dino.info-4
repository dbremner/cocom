This is dino.info, produced by makeinfo version 4.0 from
/tmp/sgmltmp.dino13668.info.2.

   \input texinfo


File: dino.info,  Node: Functions for access to process information,  Next: Miscellaneous functions,  Prev: Time functions,  Up: Predeclared functions

Functions for access to process information
-------------------------------------------

   There are Dino predeclared functions which are used to get
information about the current OS process (Dino interpreter which
executes the program).  Each OS processor has unique identifier and
usually OS processes are called by a concrete user and group and are
executed on behalf of the concrete user and group (so called effective
identifiers).  The following functions return such information.  On
some OSes the function may return string "Unknown" as a name if there
are notion of user and group identifiers.
   * `getpid ()'.  The function returns integer value which is process
     ID of the current OS process.

   * `getun ()'.  The function returns new string which is user name
     for the current OS process.

   * `geteun ()'.  The function returns new string which is effective
     user name for the current OS process.

   * `getgn ()'.  The function returns new string which is group name
     for the current OS process.

   * `getegn ()'.  The function returns new string which is effective
     group name for the current OS process.

   * `getgroups ()'.  The function returns new vector of strings
     (possibly empty vector) representing supplementary group names for
     the current OS process.


File: dino.info,  Node: Miscellaneous functions,  Prev: Functions for access to process information,  Up: Predeclared functions

Miscellaneous functions
-----------------------

   There are the following miscellaneous functions.
   * `max (v1, v2, ...)'.  The function searches for and returns
     maximal value between all parameters.  The parameters should be of
     integer or floating point type after implicit arithmetic
     conversions.  So the function can return integer or floating point
     number depending from the type of maximal value after the
     conversion.

   * `min (v1, v2, ...)'.  The function is analogous to the previous
     function but searches for and returns the minimal value.

   * `tolower (str)'.  The function expects that parameter `str' (after
     implicit string conversion) is a string.  The function returns new
     string `str' in which upper case letters changed by the
     corresponding lower case letters.

   * `toupper (str)'.  The function expects that parameter `str' (after
     implicit string conversion) is a string.  The function returns new
     string `str' in which lower case letters changed by the
     corresponding upper case letters.

   * `eltype (vect)'.  The function expects that the parameter value is
     a vector.  The function returns `nil' if the vector is
     heterogenous, otherwise the function returns type of the vector
     elements (type of `nil' if the vector is empty).

   * `keys (tab)'.  The function expects that the parameter value is a
     table.  The function returns new mutable vector containing all
     keys of the table.  The order of keys in the vector is undefined.

   * `context (par)'. The function returns context (see section
     `Declarations and Scope Rules') represented by a block instance or
     an object for given parameter value which should be a function, a
     class, a thread, a block instance, or an object.

   * `inside (par1, par2[, flag])'.  The function usage goal is to
     check that something declared inside something other.  If the
     third parameter value after implicit integer conversion is given
     and nonzero, it is checked with taking contexts into account.  The
     second parameter value should be a function or a class.  The first
     parameter value should be a function, a class, an object, or a
     block instance.  In the last three cases, they defines
     corresponding function, class, block.  If the function, class,
     block defined by the first parameter is declared inside function
     or class given by the second parameter, the function `inside'
     returns 1.  The function `inside' returns 1 also if function or
     class defined by the first parameter is the same as the function or
     class given by the second parameter.  Otherwise the function
     `inside' returns 0.  The following example illustrates the
     difference between checking with taking contexts into account and
     without it.
                    class c () {
                      class subc () {
                      }
                    }
                    inside (c ().subc (), c ().subc);
                    inside (c ().subc (), c ().subc, 1);

     The first call of `inside' returns 1, the second one returns 0.

   * `subv (vect, index[, length])'.  The function is used to extract a
     slice of vector elements.  The first parameter value should be a
     vector after implicit string conversion.  The second and the third
     parameter values should be integers after implicit integer
     conversion. The function extracts only element or part of the
     slice existing in the vector (so you can use any values of the
     index and the length).  If index is negative, it is considered to
     be equal to zero.  If the length is negative, the slice will
     finish on the vector end.  The function returns new vector which
     is the slice.  The result vector is immutable only when the
     original vector is immutable.

   * `del (vect, index[, length]) or del (tab, key)'.  The first form
     of the function is used to remove the vector element or the slice
     of vector elements from the mutable vector.  The second and the
     third parameter values should be integers after implicit integer
     conversion. The function removes only element or part of the slice
     existing in the vector (so you can use any values of the index and
     the length).  If index is negative, it is considered to be equal
     to zero.  If the length is negative, the slice will finish on the
     vector end.  The second form of the function is used to remove the
     element (if any) with given key from the mutable table.  The
     function generates exception `immutable' if we are trying to
     remove from an immutable vector or table.  The function returns
     the modified vector.

   * `ins (vect, el[, index])'.  The function inserts element given by
     the second parameter into the vector given by the first parameter
     on the place given by the third parameter.  If the third parameter
     is not given it is believed to be zero.  The third parameter
     should be an integer after implicit integer conversion.  If the
     third parameter is negative or equal or greater than the vector
     length, the element is inserted at the end of the vector.  The
     function generates exception `immutable' if we are trying to
     insert into an immutable vector.  The function returns the
     modified vector.

   * `insv (vect, vect[, index])'.  The function is analogous to the
     function `ins' but it is used for insertion of all vector elements
     into the vector given as the first parameter.  So the second
     parameter value should be a vector.  The function returns the
     modified vector.

   * `rev (vect)'.  The function reverses given vector.  The function
     generates exception `immutable' if we are trying to reverse an
     immutable vector.  The function returns the modified vector.

   * `cmpv (vect, vect)'.  The function makes implicit string
     conversion of the parameter values.  After that, the parameter
     values should be vectors whose the first corresponding equal
     elements should have the same type (character, integer, or
     floating point type).  The first corresponding unequal elements
     should have the same type too (the remaining elements can have
     different type).  As usually if this is not true, exception
     `partype' is generated.  The function returns 1 if the first
     unequal element value of the first vector is greater than the
     corresponding element in the second vector, -1 if less, and 0 if
     the all vector elements are equal.  If the first vector is a
     prefix of the second vector, the function returns -1.  If the
     second vector is a prefix of the first vector, the function
     returns 1.  So it is generalized lexicographical order.

   * `sort (vect[, compare_function])'.  The function returns
     new sorted vector.  The original vector given as the first
     parameter value should be a homogeneous vector whose elements are
     of character, integer, or floating point type.  If the second
     parameter is not given, standard arithmetic order (see comparison
     operators) is used.  To use special ordering, use the second
     parameter which should be a function which compares two elements
     of the vector and returns negative integer if the first parameter
     value (element) is less than the second one, positive integer if
     the first parameter value is greater than the second one, and zero
     if they are equal.

   * `exit (code)'.  The function finishes work of the interpreter with
     given code which should be integer value after implicit integer
     conversion.

   * `gc ()'.  The function forces garbage collection with heap
     compaction.  Usually Dino interpreter itself calls garbage
     collection when there are no more free memory.

   * `system (command)'.  The function executes command given by a
     string (the parameter value) in OS command interpreter.  Besides
     standard exceptions `parnumber' and `partype' the function may
     generate exceptions `noshell' and `systemfail'.

   * `srand ([seed])'.  The function sets the parameter value (after
     implicit integer conversion) as the seed for a new sequence of
     pseudo-random integers to be returned by `rand'.  These sequences
     are repeatable by calling `srand' with the same seed value.  If
     the parameter is not given, the seed will be the result of calling
     function `time'.

   * `rand ()'.  The function returns a pseudo-random integer value.
     If the function `srand' is not called before, 1 will be used as
     the seed value.


File: dino.info,  Node: Appendix A- Syntax of Dino,  Next: Appendix B- Implementation,  Prev: Predeclared identifiers,  Up: Top

Appendix A- Syntax of Dino
**************************

     Expr = Expr "?"  Expr ":" Expr
          | Expr "||"  Expr
          | Expr "&&"  Expr
          | Expr in  Expr
          | Expr "|"  Expr
          | Expr "^"  Expr
          | Expr "&"  Expr
          | Expr "=="  Expr
          | Expr "!="  Expr
          | Expr "==="  Expr
          | Expr "!=="  Expr
          | Expr "<"  Expr
          | Expr ">"  Expr
          | Expr "<="  Expr
          | Expr ">="  Expr
          | Expr "<<"  Expr
          | Expr ">>"  Expr
          | Expr ">>>"  Expr
          | Expr "@"  Expr
          | Expr "+"  Expr
          | Expr "-"  Expr
          | Expr "*"  Expr
          | Expr "/"  Expr
          | Expr "%"  Expr
          | "!"  Expr
          | "+"  Expr
          | "-"  Expr
          | "~"  Expr
          | "#"  Expr
          | final  Expr
          | new  Expr
          | Designator
          | INTEGER
          | FLOATINGPOINTNUMBER
          | CHARACTER
          | nil
          | "(" Expr ")"
          | Call
          | "["  ElistPartsList "]"
          | "{"  ElistPartsList "}"
          | STRING
          | char
          | int
          | float
          | hide
          | hideblock
          | vector
          | table
          | func
          | thread
          | class
          | func "(" ")"
          | char "(" Expr ")"
          | int "(" Expr ")"
          | float "(" Expr ")"
          | vector "(" Expr ["," Expr] ")"
          | table "(" Expr ")"
          | thread "(" ")"
          | class "(" ")"
          | type
          | type "(" Expr ")"
          | func "(" Expr ")"
          | thread "(" Expr ")"
          | class "(" Expr ")"
     
     Designator = DesignatorOrCall "["  Expr "]"
                | DesignatorOrCall "{"  Expr "}"
                | DesignatorOrCall ActualParameters
                | DesignatorOrCall "."  IDENT
                | "(" Expr ")" "->"  IDENT
                |  "*" "(" Expr ")"
                | IDENT
     
     ElistPartsList = [ Expr [ ":" Expr ] {"," Expr [ ":" Expr ] } ]
     
     DesignatorOrCall = Designator
                      | Call
     
     Call = Designator ActualParameters
     
     ActualParameters = "("  [ Expr { "," Expr } ] ")"
     
     VarParList = VarPar { "," VarPar }
     
     VarPar = [final] IDENT [ "="  Expr]
     
     Stmt = ExecutiveStmt
          | Declaration
     
     Assign = "="
            | "*="
            | "/="
            | "%="
            | "+="
            | "-="
            | "@="
            | "<<="
            | ">>="
            | ">>>="
            | "&="
            | "^="
            | "|="
     
     ExecutiveStmt = ";"
                   | Designator Assign  Expr ";"
                   | Designator ("++" | "--")  ";"
                   | ("++" | "--")  Designator ";"
                   | Designator ActualParameters  ";"
                   | if  "(" Expr ")" Stmt [ else Stmt ]
                   | for  "("  Stmt ForGuardExpr ";"  Stmt ")" Stmt
                   | for  "("  Designator in Expr ")" Stmt
                   | break ";"
                   | continue ";"
                   | return  [ Expr ] ";"
                   | throw  Expr ";"
                   | wait  Expr ";"
                   | BlockStmt
                   | TryBlockStmt
     
     ForGuardExpr = [Expr]
     
     BlockStmt = Block
     
     TryBlockStmt = try Block { Catch }
     
     Catch = catch  "(" ExceptClassList ")" Block
     
     ExceptClassList = Expr { "," Expr }
     
     Declaration = VarDeclarations
                 | AccessClause
                 | ExternDeclarations
                 | FuncClassExtDeclaration
                 | IncludeDeclaration
     
     VarDeclarations = var  VarParList ";"
     
     ExternDeclarations = extern  ExternItem { "," ExternItem } ";"
     
     FuncClassExtDeclaration = Header Block
     
     AccessClause = (public | private | friend) AccessList ";"
     
     AccessList = IDENT { "," IDENT }
     
     IncludeDeclaration = include ["+"] STRING ";"
     
     ExternItem = IDENT
                | IDENT  "(" ")"
     
     Header = [final] FuncThreadClass IDENT FormalParameters
            | ext IDENT
     
     FuncThreadClass = func
                     | thread
                     | class
     
     FormalParameters = "("  [ VarParList ] ")"
                      | "("  VarParList "," "..."  ")"
                      | "(" "..."  ")"
     
     Block = "{"  StmtList "}"
     
     StmtList = { Stmt }
     
     Program = StmtList


File: dino.info,  Node: Appendix B- Implementation,  Prev: Appendix A- Syntax of Dino,  Up: Top

Appendix B- Implementation
**************************




     DINO(1)                    User Manuals                   DINO(1)
     
     
     NAME
            dino - interpreter of the programming language DINO
     
     SYNOPSIS
            dino  [ -s -h size -Idirname -Lpath -p] (-c program | pro-
            gram-file ) dino-program-arguments
     
     DESCRIPTION
            dino interprets program on DINO programming language.  The
            program file (and include files) must have suffix .d
     
            Description  of DINO language is in report of the Program-
            ming Language DINO.
     
     OPTIONS
            The options which are known for DINO interpreter are:
     
            -c program
                   Execute Dino program given on the command  line  as
                   argument.
     
            -h number
                   Determine  the size of the heap chunks used by DINO
                   interpreter.  The size can be given in bytes  (e.g.
                   32000),  in  kilobytes  (e.g. 64k), or in megabytes
                   (e.g. 1m).  The default size is 1  Megabyte.   Ini-
                   tially,  Dino  interpreter  creates  one chunk.  It
                   allocates additional chunk (as  rule  of  the  same
                   size) whenever there are no additional memory after
                   garbage collection.
     
            -s     Output some statistics  of  interpreter  work  into
                   stderr.   Statistics  contains  maximal  heap size,
                   number of heap chunks, and number of collisions  in
                   hash  tables which are used for implementation DINO
                   tables.
     
            -Idirname
                   Define directory in which Dino include  files  will
                   be  searched  for.  The order searching in directo-
                   ries given with this option is the same as  one  on
                   the command line.
     
            -Ldirname
                   Define   external   libraries  (if  shared  or  dll
                   libraries are implemented on the system.   this  is
                   true for Linux, Solaris, Irix, OSF, and Windows) in
                   which Dino external variable and functions will  be
                   searched  for.   The  order  searching in libraries
                   given with this option is the same as  one  on  the
                   command line.
     
            -p     Output  profile  information  into stderr.  Profile
                   information contains number of calls and  exceution
     
     
     
     DINO                        5 May 2001                          1
     
     
     
     
     
     DINO(1)                    User Manuals                   DINO(1)
     
     
                   times of all called functions and classes.
     
     FILES
            file.d
                   DINO program file
            libdino.so
                   DINO shared library on some Unix systems.
            mpi.d
                   DINO  file  implementing  multiple precision arith-
                   metic.
            mpi.so
                   DINO shared library used by for implementing MPI on
                   some Unix systems.
            mpi.dll
                   DINO  dll  library  used by for implementing MPI on
                   Windows systems.
            ieee.d
                   DINO file implementing IEEE standrad floating point
                   arithmetic.
            ieee.so
                   DINO  shared  library used by for implementing IEEE
                   on some Unix systems.
            ieee.dll
                   DINO dll library used by for implementing  IEEE  on
                   Windows systems.
            There are no any temporary files used by DINO.
     
     ENVIRONMENT
            There are the following environment variables which affect
            DINO behavior:
     
            DINO_HOME
                   If non-null,  it  defines  places  of  dino  shared
                   library (such library may be only on some Unix sys-
                   tems including Linux, Solaris), include files, dino
                   standard   external   libraries.   The  places  are
                   defined as subdirectory lib in directory  given  by
                   the  environment variable value.  You should define
                   the variable value on Windows if you installed  the
                   files not in directory C:\dino\lib
     
            DINO_PATH
                   If  non-null,  it  defines  place  of dino include-
                   files.  The value of  variable  has  more  priority
                   than  DINO_HOME but less priority than values given
                   in -I options.
     
            DINO_LIB
                   If non-null,  it  defines  places  of  dino  shared
                   library,  if  any.   The value of variable has more
                   priority than DINO_HOME.
     
            DINO_EXTERN_LIBS
                   If non-null, it defines paths  of  dino  additional
     
     
     
     DINO                        5 May 2001                          2
     
     
     
     
     
     DINO(1)                    User Manuals                   DINO(1)
     
     
                   external  libraries.  The libraries should be sepa-
                   rated by `:' (on Unix) or `;'  (on  Windows).   The
                   value  has  less  priority  than values given in -L
                   options.
     
     DIAGNOSTICS
            DINO diagnostics is self-explanatory.
     
     AUTHOR
            Vladimir N. Makarov, vmakarov@users.sourceforge.net
     
     BUGS
            Please, report bugs to cocom-bugs@lists.sourceforge.net.
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     DINO                        5 May 2001                          3


