This is dino.info, produced by makeinfo version 4.0 from
/tmp/sgmltmp.dino30209.info.2.

   \input texinfo


File: dino.info,  Node: Appendix A- Syntax of Dino,  Next: Appendix B- Implementation,  Prev: Predeclared identifiers,  Up: Top

Appendix A- Syntax of Dino
**************************

     Expr = Expr "?"  Expr ":" Expr
          | Expr "||"  Expr
          | Expr "&&"  Expr
          | Expr in  Expr
          | Expr "|"  Expr
          | Expr "^"  Expr
          | Expr "&"  Expr
          | Expr "=="  Expr
          | Expr "!="  Expr
          | Expr "==="  Expr
          | Expr "!=="  Expr
          | Expr "<"  Expr
          | Expr ">"  Expr
          | Expr "<="  Expr
          | Expr ">="  Expr
          | Expr "<<"  Expr
          | Expr ">>"  Expr
          | Expr ">>>"  Expr
          | Expr "@"  Expr
          | Expr "+"  Expr
          | Expr "-"  Expr
          | Expr "*"  Expr
          | Expr "/"  Expr
          | Expr "%"  Expr
          | "!"  Expr
          | "+"  Expr
          | "-"  Expr
          | "~"  Expr
          | "#"  Expr
          | final  Expr
          | new  Expr
          | Designator
          | INTEGER
          | FLOATINGPOINTNUMBER
          | CHARACTER
          | nil
          | "(" Expr ")"
          | Call
          | "["  ElistPartsList "]"
          | "{"  ElistPartsList "}"
          | STRING
          | char
          | int
          | float
          | hide
          | hideblock
          | vector
          | table
          | func
          | thread
          | class
          | func "(" ")"
          | vector "(" Expr ")"
          | table "(" Expr ")"
          | thread "(" ")"
          | class "(" ")"
          | type
          | type "(" Expr ")"
          | func "(" Expr ")"
          | thread "(" Expr ")"
          | class "(" Expr ")"
     
     Designator = DesignatorOrCall "["  Expr "]"
                | DesignatorOrCall "{"  Expr "}"
                | DesignatorOrCall ActualParameters
                | DesignatorOrCall "."  IDENT
                | "(" Expr ")" "->"  IDENT
                |  "*" "(" Expr ")"
                | IDENT
     
     ElistPartsList = [ Expr [ ":" Expr ] {"," Expr [ ":" Expr ] } ]
     
     DesignatorOrCall = Designator
                      | Call
     
     Call = Designator ActualParameters
     
     ActualParameters = "("  [ Expr { "," Expr } ] ")"
     
     VarParList = VarPar { "," VarPar }
     
     VarPar = [final] IDENT [ "="  Expr]
     
     Stmt = ExecutiveStmt
          | Declaration
     
     Assign = "="
            | "*="
            | "/="
            | "%="
            | "+="
            | "-="
            | "@="
            | "<<="
            | ">>="
            | ">>>="
            | "&="
            | "^="
            | "|="
     
     ExecutiveStmt = ";"
                   | Designator Assign  Expr ";"
                   | Designator ("++" | "--")  ";"
                   | ("++" | "--")  Designator ";"
                   | Designator ActualParameters  ";"
                   | if  "(" Expr ")" Stmt [ else Stmt ]
                   | for  "("  Stmt ForGuardExpr ";"  Stmt ")" Stmt
                   | for  "("  Designator in Expr ")" Stmt
                   | break ";"
                   | continue ";"
                   | return  [ Expr ] ";"
                   | throw  Expr ";"
                   | wait  Expr ";"
                   | BlockStmt
                   | TryBlockStmt
     
     ForGuardExpr = [Expr]
     
     BlockStmt = Block
     
     TryBlockStmt = try Block { Catch }
     
     Catch = catch  "(" ExceptClassList ")" Block
     
     ExceptClassList = Expr { "," Expr }
     
     Declaration = VarDeclarations
                 | AccessClause
                 | ExternDeclarations
                 | FuncClassExtDeclaration
                 | IncludeDeclaration
     
     VarDeclarations = var  VarParList ";"
     
     ExternDeclarations = extern  ExternItem { "," ExternItem } ";"
     
     FuncClassExtDeclaration = Header Block
     
     AccessClause = (public | private | friend) AccessList ";"
     
     AccessList = IDENT { "," IDENT }
     
     IncludeDeclaration = include ["+"] STRING ";"
     
     ExternItem = IDENT
                | IDENT  "(" ")"
     
     Header = [final] FuncThreadClass IDENT FormalParameters
            | ext IDENT
     
     FuncThreadClass = func
                     | thread
                     | class
     
     FormalParameters = "("  [ VarParList ] ")"
                      | "("  VarParList "," "..."  ")"
                      | "(" "..."  ")"
     
     Block = "{"  StmtList "}"
     
     StmtList = { Stmt }
     
     Program = StmtList


File: dino.info,  Node: Appendix B- Implementation,  Prev: Appendix A- Syntax of Dino,  Up: Top

Appendix B- Implementation
**************************




     DINO(1)                    User Manuals                   DINO(1)
     
     
     NAME
            dino - interpreter of the programming language DINO
     
     SYNOPSIS
            dino  [ -s -h size -Idirname -Lpath -p] (-c program | pro-
            gram-file ) dino-program-arguments
     
     DESCRIPTION
            dino interprets program on DINO programming language.  The
            program file (and include files) must have suffix .d
     
            Description  of DINO language is in report of the Program-
            ming Language DINO.
     
     OPTIONS
            The options which are known for DINO interpreter are:
     
            -c program
                   Execute Dino program given on the command  line  as
                   argument.
     
            -h number
                   Determine  the size of the heap chunks used by DINO
                   interpreter.  The size can be given in bytes  (e.g.
                   32000),  in  kilobytes  (e.g. 64k), or in megabytes
                   (e.g. 1m).  The default size is 1  Megabyte.   Ini-
                   tially,  Dino  interpreter  creates  one chunk.  It
                   allocates additional chunk (as  rule  of  the  same
                   size) whenever there are no additional memory after
                   garbage collection.
     
            -s     Output some statistics  of  interpreter  work  into
                   stderr.   Statistics  contains  maximal  heap size,
                   number of heap chunks, and number of collisions  in
                   hash  tables which are used for implementation DINO
                   tables.
     
            -Idirname
                   Define directory in which Dino include  files  will
                   be  searched  for.  The order searching in directo-
                   ries given with this option is the same as  one  on
                   the command line.
     
            -Ldirname
                   Define   external   libraries  (if  shared  or  dll
                   libraries are implemented on the system.   this  is
                   true for Linux, Solaris, Irix, OSF, and Windows) in
                   which Dino external variable and functions will  be
                   searched  for.   The  order  searching in libraries
                   given with this option is the same as  one  on  the
                   command line.
     
            -p     Output  profile  information  into stderr.  Profile
                   information contains number of calls and  exceution
     
     
     
     DINO                        5 May 2001                          1
     
     
     
     
     
     DINO(1)                    User Manuals                   DINO(1)
     
     
                   times of all called functions and classes.
     
     FILES
            file.d
                   DINO program file
            libdino.so
                   DINO shared library on some Unix systems.
            mpi.d
                   DINO  file  implementing  multiple precision arith-
                   metic.
            mpi.so
                   DINO shared library used by for implementing MPI on
                   some Unix systems.
            mpi.dll
                   DINO  dll  library  used by for implementing MPI on
                   Windows systems.
            ieee.d
                   DINO file implementing IEEE standrad floating point
                   arithmetic.
            ieee.so
                   DINO  shared  library used by for implementing IEEE
                   on some Unix systems.
            ieee.dll
                   DINO dll library used by for implementing  IEEE  on
                   Windows systems.
            There are no any temporary files used by DINO.
     
     ENVIRONMENT
            There are the following environment variables which affect
            DINO behavior:
     
            DINO_HOME
                   If non-null,  it  defines  places  of  dino  shared
                   library (such library may be only on some Unix sys-
                   tems including Linux, Solaris), include files, dino
                   standard   external   libraries.   The  places  are
                   defined as subdirectory lib in directory  given  by
                   the  environment variable value.  You should define
                   the variable value on Windows if you installed  the
                   files not in directory C:\dino\lib
     
            DINO_PATH
                   If  non-null,  it  defines  place  of dino include-
                   files.  The value of  variable  has  more  priority
                   than  DINO_HOME but less priority than values given
                   in -I options.
     
            DINO_LIB
                   If non-null,  it  defines  places  of  dino  shared
                   library,  if  any.   The value of variable has more
                   priority than DINO_HOME.
     
            DINO_EXTERN_LIBS
                   If non-null, it defines paths  of  dino  additional
     
     
     
     DINO                        5 May 2001                          2
     
     
     
     
     
     DINO(1)                    User Manuals                   DINO(1)
     
     
                   external  libraries.  The libraries should be sepa-
                   rated by `:' (on Unix) or `;'  (on  Windows).   The
                   value  has  less  priority  than values given in -L
                   options.
     
     DIAGNOSTICS
            DINO diagnostics is self-explanatory.
     
     AUTHOR
            Vladimir N. Makarov, vmakarov@users.sourceforge.net
     
     BUGS
            Please, report bugs to cocom-bugs@lists.sourceforge.net.
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     DINO                        5 May 2001                          3


